//--------------------
// Mixins - Utilities
//--------------------

// Margins
@mixin margin($loc, $sizeAsString, $autoMobile: false) { //-#{map-get($sizes, sm)} for negatives

  $size: map-get($sizes, $sizeAsString);

  @if not map-has-key($sizes, $sizeAsString) {
    $size: $sizeAsString;
  }

  $size-md: $size;
  $size-sm: $size;

  @if ($autoMobile == true) {
    @if ($sizeAsString == xsm) or ($sizeAsString == sm) or ($sizeAsString == lg) or ($sizeAsString == xlg) or ($sizeAsString == xxlg) or ($sizeAsString == jumbo) {
      $size-md: $size/2;
      @if (strip-units($size-md) <= 5 ) {
        $size-md: 5px;
      }
      $size-sm: $size/3;
      @if (strip-units($size-sm) <= 5 ) {
        $size-md: 5px;
      }
    }
  }

  @if $loc == top {
    margin-top: $size;
    @include bp(md) { margin-top: $size-md; }
    @include bp(sm) { margin-top: $size-sm; }
  } @else if $loc == right {
    margin-right: $size;
    @include bp(md) { margin-right: $size-md; }
    @include bp(sm) { margin-right: $size-sm; }
  } @else if $loc == bottom {
    margin-bottom: $size;
    @include bp(md) { margin-bottom: $size-md; }
    @include bp(sm) { margin-bottom: $size-sm; }
  } @else if $loc == left {
    margin-left: $size;
    @include bp(md) { margin-left: $size-md; }
    @include bp(sm) { margin-left: $size-sm; }
  } @else if $loc == sides {
    margin-left: $size; margin-right: $size;
    @include bp(md) { margin-left: $size-md; margin-right: $size-md; }
    @include bp(sm) { margin-left: $size-sm; margin-right: $size-sm; }
  } @else if $loc == ends {
    margin-top: $size; margin-bottom: $size;
    @include bp(md) { margin-top: $size-md; margin-bottom: $size-md; }
    @include bp(sm) { margin-top: $size-sm; margin-bottom: $size-sm; }
  } @else {
    margin: $size;
    @include bp(md) { margin: $size-md; }
    @include bp(sm) { margin: $size-sm; }
  }
}

// Paddings
@mixin padding($loc, $sizeAsString, $autoMobile: false) {

  $size: map-get($sizes, $sizeAsString);

  @if not map-has-key($sizes, $sizeAsString) {
    $size: $sizeAsString;
  }

  $size-md: $size;
  $size-sm: $size;

  @if ($autoMobile == true) {
    @if ($sizeAsString == xsm) or ($sizeAsString == sm) or ($sizeAsString == lg) or ($sizeAsString == xlg) or ($sizeAsString == xxlg) or ($sizeAsString == jumbo) {
      $size-md: $size/2;
      @if (strip-units($size-md) <= 5 ) {
        $size-md: 5px;
      }
      $size-sm: $size/3;
      @if (strip-units($size-sm) <= 5 ) {
        $size-md: 5px;
      }
    }
  }

  @if $loc == top {
    padding-top: $size;
    @include bp(md) { padding-top: $size-md; }
    @include bp(sm) { padding-top: $size-sm; }
  } @else if $loc == right {
    padding-right: $size;
    @include bp(md) { padding-right: $size-md; }
    @include bp(sm) { padding-right: $size-sm; }
  } @else if $loc == bottom {
    padding-bottom: $size;
    @include bp(md) { padding-bottom: $size-md; }
    @include bp(sm) { padding-bottom: $size-sm; }
  } @else if $loc == left {
    padding-left: $size;
    @include bp(md) { padding-left: $size-md; }
    @include bp(sm) { padding-left: $size-sm; }
  } @else if $loc == sides {
    padding-left: $size; padding-right: $size;
    @include bp(md) { padding-left: $size-md; padding-right: $size-md; }
    @include bp(sm) { padding-left: $size-sm; padding-right: $size-sm; }
  } @else if $loc == ends {
    padding-top: $size; padding-bottom: $size;
    @include bp(md) { padding-top: $size-md; padding-bottom: $size-md; }
    @include bp(sm) { padding-top: $size-sm; padding-bottom: $size-sm; }
  } @else {
    padding: $size;
    @include bp(md) { padding: $size-md; }
    @include bp(sm) { padding: $size-sm; }
  }
}

// Flex
@mixin display-flex() {
  display: -webkit-flex;
  display: flex;
}

@mixin justify-content($val) {
  -webkit-justify-content: $val;
  justify-content: $val;
}

@mixin align-items($val) {
  -webkit-align-items: $val;
  align-items: $val;
}

@mixin align-self($val) {
  -webkit-align-self: $val;
  align-self: $val;
}

@mixin flex-direction($val) {
  -webkit-flex-direction: $val;
  flex-direction: $val;
}

@mixin flex-basis($val) {
  -webkit-flex-basis: $val;
  flex-basis: $val;
}

@mixin flex-grow($val) {
  -webkit-flex-grow: $val;
  flex-grow: $val;
}

@mixin flex-shrink($val) {
  -webkit-flex-shrink: $val;
  flex-shrink: $val;
}

@mixin flex-wrap($val) {
  -webkit-flex-wrap: $val;
  flex-wrap: $val;
}

@mixin flex-order($val) {
	-webkit-order: $val;
	order: $val;
}

// Background Colors
@mixin background-color($colorAsString) {
  $color: map-get($colors, $colorAsString);
  @if not map-has-key($colors, $colorAsString) {
    $color: $colorAsString;
  }

  background-color: $color;
};

// Borders
@mixin border($loc: all, $sizeAsString: one, $type: solid, $colorAsString: grey300) {
  $size: map-get($sizes, $sizeAsString);
  @if not map-has-key($sizes, $sizeAsString) {
    $size: $sizeAsString;
  }

  $color: map-get($colors, $colorAsString);
  @if not map-has-key($colors, $colorAsString) {
    $color: $colorAsString;
  }

  @if $loc == all {
    border: $size $type $color;
  } @else if $loc == top {
    border-top: $size $type $color;
  } @else if $loc == right {
    border-right: $size $type $color;
  } @else if $loc == bottom {
    border-bottom: $size $type $color;
  } @else if $loc == left {
    border-left: $size $type $color;
  } @else if $loc == sides {
    border-left: $size $type $color;
    border-right: $size $type $color;
  } @else if $loc == ends {
    border-top: $size $type $color;
    border-bottom: $size $type $color;
  }
}

// Border Radius
@mixin border-radius($loc, $sizeAsString) {

  $size: map-get($sizes, $sizeAsString);

  @if not map-has-key($sizes, $sizeAsString) {
    $size: $sizeAsString;
  }

  @if $loc == all {
    border-top-left-radius:$size;
    border-top-right-radius:$size;
    border-bottom-left-radius:$size;
    border-bottom-right-radius:$size;
  } @else if $loc == top {
    border-top-left-radius:$size;
    border-top-right-radius:$size;
  } @else if $loc == right {
    border-top-right-radius:$size;
    border-bottom-right-radius:$size;
  } @else if $loc == bottom {
    border-bottom-left-radius:$size;
    border-bottom-right-radius:$size;
  } @else if $loc == left {
    border-top-left-radius:$size;
    border-bottom-left-radius:$size;
  } @else if $loc == top-right {
    border-top-right-radius:$size;
  } @else if $loc == bottom-right {
    border-bottom-right-radius:$size;
  } @else if $loc == bottom-left {
    border-bottom-left-radius:$size;
  } @else if $loc == top-left {
    border-top-left-radius:$size;
  }
}